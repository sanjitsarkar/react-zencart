{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */\n\nexport const getCartItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  if (!userId) {\n    new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const userCart = schema.users.findBy({\n    _id: userId\n  }).cart;\n  return new Response(200, {}, {\n    cart: userCart\n  });\n};\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const {\n      product\n    } = JSON.parse(request.requestBody);\n    userCart.push({ ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(201, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    let userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter(item => item._id !== productId);\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const {\n      action\n    } = JSON.parse(request.requestBody);\n\n    if (action.type === \"increment\") {\n      userCart.forEach(product => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach(product => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["/home/xanjit/Desktop/neog/react-ecom/src/backend/controllers/CartController.js"],"names":["Response","formatDate","requiresAuth","getCartItemsHandler","schema","request","userId","call","errors","userCart","users","findBy","_id","cart","addItemToCartHandler","product","JSON","parse","requestBody","push","createdAt","updatedAt","qty","db","update","error","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","action","type","forEach"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */\nexport const getCartItemsHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userCart = schema.users.findBy({ _id: userId }).cart;\n  return new Response(200, {}, { cart: userCart });\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { product } = JSON.parse(request.requestBody);\n    userCart.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1,\n    });\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(201, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userCart = schema.users.findBy({ _id: userId }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { action } = JSON.parse(request.requestBody);\n    if (action.type === \"increment\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}