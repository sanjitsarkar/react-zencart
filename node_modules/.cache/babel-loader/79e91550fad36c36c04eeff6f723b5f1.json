{"ast":null,"code":"var _jsxFileName = \"/home/xanjit/Desktop/neog/react/react-zencart/src/context/Category/CategoryContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useContext, useEffect, useReducer, useState } from \"react\";\nimport { initialState, reducer } from \"../../reducers/reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CategoryContext = /*#__PURE__*/createContext();\n\nconst CategoryProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    axios.get(\"/api/categories\").then(res => {\n      dispatch({\n        action: \"SUCCESS\",\n        payload: res.data\n      });\n      setCategories(res.data);\n    }).catch(err => {\n      dispatch({\n        action: \"FAILURE\",\n        payload: err.message\n      });\n      console.log(err);\n    });\n  }, [state, categories, dispatch]);\n  return /*#__PURE__*/_jsxDEV(CategoryContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CategoryProvider, \"wmfDdBbyLwbkkdREBajnq1WWqQE=\");\n\n_c = CategoryProvider;\n\nconst useCategory = () => {\n  _s2();\n\n  return useContext(CategoryContext);\n};\n\n_s2(useCategory, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { CategoryProvider, useCategory };\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryProvider\");","map":{"version":3,"sources":["/home/xanjit/Desktop/neog/react/react-zencart/src/context/Category/CategoryContext.jsx"],"names":["axios","createContext","useContext","useEffect","useReducer","useState","initialState","reducer","CategoryContext","CategoryProvider","children","state","dispatch","categories","setCategories","get","then","res","action","payload","data","catch","err","message","console","log","useCategory"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,wBAAtC;;AAEA,MAAMC,eAAe,gBAAGP,aAAa,EAArC;;AAEA,MAAMQ,gBAAgB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACG,OAAD,EAAUD,YAAV,CAApC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdH,IAAAA,KAAK,CACFe,GADH,CACO,iBADP,EAEGC,IAFH,CAESC,GAAD,IAAS;AACbL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,MAAM,EAAE,SAAV;AAAqBC,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAlC,OAAD,CAAR;AACAN,MAAAA,aAAa,CAACG,GAAG,CAACG,IAAL,CAAb;AACD,KALH,EAMGC,KANH,CAMUC,GAAD,IAAS;AACdV,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,MAAM,EAAE,SAAV;AAAqBC,QAAAA,OAAO,EAAEG,GAAG,CAACC;AAAlC,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,KATH;AAUD,GAXQ,EAWN,CAACX,KAAD,EAAQE,UAAR,EAAoBD,QAApB,CAXM,CAAT;AAYA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAjC;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;GAAMD,gB;;KAAAA,gB;;AAsBN,MAAMiB,WAAW,GAAG;AAAA;;AAAA,SAAMxB,UAAU,CAACM,eAAD,CAAhB;AAAA,CAApB;;IAAMkB,W;;AAEN,SAASjB,gBAAT,EAA2BiB,WAA3B","sourcesContent":["import axios from \"axios\";\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useReducer,\n  useState,\n} from \"react\";\nimport { initialState, reducer } from \"../../reducers/reducer\";\n\nconst CategoryContext = createContext();\n\nconst CategoryProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\"/api/categories\")\n      .then((res) => {\n        dispatch({ action: \"SUCCESS\", payload: res.data });\n        setCategories(res.data);\n      })\n      .catch((err) => {\n        dispatch({ action: \"FAILURE\", payload: err.message });\n        console.log(err);\n      });\n  }, [state, categories, dispatch]);\n  return (\n    <CategoryContext.Provider value={{ state, dispatch }}>\n      {children}\n    </CategoryContext.Provider>\n  );\n};\n\nconst useCategory = () => useContext(CategoryContext);\n\nexport { CategoryProvider, useCategory };\n"]},"metadata":{},"sourceType":"module"}