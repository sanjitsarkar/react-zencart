{"ast":null,"code":"var _jsxFileName = \"/home/xanjit/Desktop/neog/react/react-zencart/src/context/modal/ModalContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContext = /*#__PURE__*/createContext();\n\nconst ModalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [modal, setModal] = useState(false);\n\n  const toggleModal = () => {\n    setModal(modal => !modal);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: {\n      modal,\n      toggleModal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ModalProvider, \"FxRBWQPa/dKnwvdbY5qed8chvVc=\");\n\n_c = ModalProvider;\n\nconst useModal = () => {\n  _s2();\n\n  return useContext(ModalContext);\n};\n\n_s2(useModal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { ModalProvider, useModal };\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"sources":["/home/xanjit/Desktop/neog/react/react-zencart/src/context/modal/ModalContext.jsx"],"names":["createContext","useContext","useState","ModalContext","ModalProvider","children","modal","setModal","toggleModal","useModal"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;;AAEA,MAAMI,aAAa,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMM,WAAW,GAAG,MAAM;AACzBD,IAAAA,QAAQ,CAAED,KAAD,IAAW,CAACA,KAAb,CAAR;AACA,GAFD;;AAIA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAA9B;AAAA,cAAuDH;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CARD;;GAAMD,a;;KAAAA,a;;AAUN,MAAMK,QAAQ,GAAG;AAAA;;AAAA,SAAMR,UAAU,CAACE,YAAD,CAAhB;AAAA,CAAjB;;IAAMM,Q;;AAEN,SAASL,aAAT,EAAwBK,QAAxB","sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nconst ModalContext = createContext();\n\nconst ModalProvider = ({ children }) => {\n\tconst [modal, setModal] = useState(false);\n\n\tconst toggleModal = () => {\n\t\tsetModal((modal) => !modal);\n\t};\n\n\treturn <ModalContext.Provider value={{ modal, toggleModal }}>{children}</ModalContext.Provider>;\n};\n\nconst useModal = () => useContext(ModalContext);\n\nexport { ModalProvider, useModal };\n"]},"metadata":{},"sourceType":"module"}