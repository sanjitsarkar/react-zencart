{"ast":null,"code":"var _jsxFileName = \"/home/xanjit/Desktop/neog/react/react-zencart/src/components/modal/LoginCardModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/auth/auth-context';\nimport '../css/products-page.css';\nimport { useModal } from '../../context/modal/modal-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginCardModal = () => {\n  _s();\n\n  const {\n    isLogin,\n    isLoading,\n    error,\n    toggleIsLogin,\n    signUpHandler,\n    loginHandler,\n    logoutHandler,\n    errorHandler\n  } = useAuth();\n  const {\n    toggleModal\n  } = useModal();\n  const defaultText = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n    emailError: false,\n    passWordError: false,\n    confirmPasswordError: false\n  };\n  const [textFields, setTextFields] = useState(defaultText);\n\n  const setUserDetails = e => {\n    errorHandler(false, '');\n    setTextFields({ ...textFields,\n      [e.target.name]: e.target.value,\n      emailError: false,\n      passWordError: false,\n      confirmPasswordError: false\n    });\n  };\n\n  const signupChecker = () => {\n    const {\n      email,\n      password,\n      confirmPassword\n    } = textFields;\n    email.length !== 0 ? email.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) ? password.length !== 0 ? confirmPassword.length !== 0 ? password === confirmPassword ? signUpHandler({\n      email: email,\n      password: password\n    }) : (setTextFields({ ...textFields,\n      confirmPasswordError: true,\n      passWordError: true\n    }), errorHandler(true, 'Password and Confirm Password must be same')) : (setTextFields({ ...textFields,\n      confirmPasswordError: true\n    }), errorHandler(true, 'Confirm Password is required')) : (errorHandler(true, 'Password is required'), setTextFields({ ...textFields,\n      passWordError: true\n    })) : (errorHandler(true, 'Email is invalid'), setTextFields({ ...textFields,\n      emailError: true\n    })) : (setTextFields({ ...textFields,\n      emailError: true\n    }), errorHandler(true, 'Email is required'));\n  };\n\n  const loginChecker = async () => {\n    const {\n      email,\n      password\n    } = textFields;\n    return email.length !== 0 ? email.toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) ? password.length !== 0 ? loginHandler({\n      email: email,\n      password: password\n    }) : (errorHandler(true, 'Password is required'), setTextFields({ ...textFields,\n      passWordError: true\n    })) : (errorHandler(true, 'Email is invalid'), setTextFields({ ...textFields,\n      emailError: true\n    })) : (setTextFields({ ...textFields,\n      emailError: true\n    }), errorHandler(true, 'Email is required'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-column align-items-center space-evenly\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isLogin ? 'Login' : 'Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          labelText: \"Email Address\",\n          type: \"email\",\n          name: \"email\",\n          onChange: event => setUserDetails(event),\n          hasError: textFields.emailError,\n          value: textFields.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          labelText: \"Password\",\n          type: \"password\",\n          name: \"password\",\n          onChange: event => setUserDetails(event),\n          hasError: textFields.passWordError,\n          value: textFields.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 6\n        }, this), !isLogin && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            labelText: \"Confirm password\",\n            type: \"password\",\n            name: \"confirmPassword\",\n            onChange: event => setUserDetails(event),\n            hasError: textFields.confirmPasswordError,\n            value: textFields.confirmPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 8\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isLogin ? async () => {\n          const success = await loginChecker();\n          success ? (toggleModal(), setTextFields(defaultText)) : null;\n        } : () => {\n          signupChecker();\n        },\n        className: `btn btn-products ${isLoading ? 'btn-products-disabled' : 'btn-primary'}`,\n        children: isLoading ? 'Loading...' : isLogin ? 'Login' : 'SignUp'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), error.hasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"modal-error\",\n        children: [\" *\", error.errorMessage, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          toggleIsLogin();\n          errorHandler(false, '');\n        },\n        className: \" btn-link btn\",\n        children: isLogin ? \"Don't have account?Sign up!\" : 'Already have account?Log In!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n};\n\n_s(LoginCardModal, \"8su1vJj9kB64Ia4OGBHWAxgEt+8=\", false, function () {\n  return [useAuth, useModal];\n});\n\n_c = LoginCardModal;\nexport { LoginCardModal };\n\nconst InputField = _ref => {\n  let {\n    labelText,\n    type,\n    name,\n    onChange,\n    value,\n    hasError\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: labelText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: `text-field ${hasError && 'text-field-error'} `,\n      autoComplete: \"off\",\n      type: type,\n      name: name,\n      placeholder: labelText,\n      onChange: onChange,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = InputField;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginCardModal\");\n$RefreshReg$(_c2, \"InputField\");","map":{"version":3,"sources":["/home/xanjit/Desktop/neog/react/react-zencart/src/components/modal/LoginCardModal.jsx"],"names":["React","useState","useEffect","useAuth","useModal","LoginCardModal","isLogin","isLoading","error","toggleIsLogin","signUpHandler","loginHandler","logoutHandler","errorHandler","toggleModal","defaultText","email","password","confirmPassword","emailError","passWordError","confirmPasswordError","textFields","setTextFields","setUserDetails","e","target","name","value","signupChecker","length","toLowerCase","match","loginChecker","event","success","hasError","errorMessage","InputField","labelText","type","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/auth/auth-context';\nimport '../css/products-page.css';\nimport { useModal } from '../../context/modal/modal-context';\nconst LoginCardModal = () => {\n\tconst { isLogin, isLoading, error, toggleIsLogin, signUpHandler, loginHandler, logoutHandler, errorHandler } = useAuth();\n\tconst { toggleModal } = useModal();\n\n\tconst defaultText = {\n\t\temail: '',\n\t\tpassword: '',\n\t\tconfirmPassword: '',\n\t\temailError: false,\n\t\tpassWordError: false,\n\t\tconfirmPasswordError: false,\n\t};\n\n\tconst [textFields, setTextFields] = useState(defaultText);\n\n\tconst setUserDetails = (e) => {\n\t\terrorHandler(false, '');\n\n\t\tsetTextFields({\n\t\t\t...textFields,\n\t\t\t[e.target.name]: e.target.value,\n\t\t\temailError: false,\n\t\t\tpassWordError: false,\n\t\t\tconfirmPasswordError: false,\n\t\t});\n\t};\n\n\tconst signupChecker = () => {\n\t\tconst { email, password, confirmPassword } = textFields;\n\n\t\temail.length !== 0\n\t\t\t? email\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.match(\n\t\t\t\t\t\t/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n\t\t\t\t\t)\n\t\t\t\t? password.length !== 0\n\t\t\t\t\t? confirmPassword.length !== 0\n\t\t\t\t\t\t? password === confirmPassword\n\t\t\t\t\t\t\t? signUpHandler({ email: email, password: password })\n\t\t\t\t\t\t\t: (setTextFields({\n\t\t\t\t\t\t\t\t\t...textFields,\n\t\t\t\t\t\t\t\t\tconfirmPasswordError: true,\n\t\t\t\t\t\t\t\t\tpassWordError: true,\n\t\t\t\t\t\t\t  }),\n\t\t\t\t\t\t\t  errorHandler(true, 'Password and Confirm Password must be same'))\n\t\t\t\t\t\t: (setTextFields({ ...textFields, confirmPasswordError: true }), errorHandler(true, 'Confirm Password is required'))\n\t\t\t\t\t: (errorHandler(true, 'Password is required'), setTextFields({ ...textFields, passWordError: true }))\n\t\t\t\t: (errorHandler(true, 'Email is invalid'), setTextFields({ ...textFields, emailError: true }))\n\t\t\t: (setTextFields({ ...textFields, emailError: true }), errorHandler(true, 'Email is required'));\n\t};\n\n\tconst loginChecker = async () => {\n\t\tconst { email, password } = textFields;\n\n\t\treturn email.length !== 0\n\t\t\t? email\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.match(\n\t\t\t\t\t\t/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n\t\t\t\t\t)\n\t\t\t\t? password.length !== 0\n\t\t\t\t\t? loginHandler({ email: email, password: password })\n\t\t\t\t\t: (errorHandler(true, 'Password is required'), setTextFields({ ...textFields, passWordError: true }))\n\t\t\t\t: (errorHandler(true, 'Email is invalid'), setTextFields({ ...textFields, emailError: true }))\n\t\t\t: (setTextFields({ ...textFields, emailError: true }), errorHandler(true, 'Email is required'));\n\t};\n\n\treturn (\n\t\t<div className='modal-card'>\n\t\t\t<div className='flex-column align-items-center space-evenly'>\n\t\t\t\t<h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n\t\t\t\t<div className='input-group'>\n\t\t\t\t\t<InputField\n\t\t\t\t\t\tlabelText='Email Address'\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tname='email'\n\t\t\t\t\t\tonChange={(event) => setUserDetails(event)}\n\t\t\t\t\t\thasError={textFields.emailError}\n\t\t\t\t\t\tvalue={textFields.email}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputField\n\t\t\t\t\t\tlabelText='Password'\n\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\tname='password'\n\t\t\t\t\t\tonChange={(event) => setUserDetails(event)}\n\t\t\t\t\t\thasError={textFields.passWordError}\n\t\t\t\t\t\tvalue={textFields.password}\n\t\t\t\t\t/>\n\t\t\t\t\t{!isLogin && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<InputField\n\t\t\t\t\t\t\t\tlabelText='Confirm password'\n\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\tname='confirmPassword'\n\t\t\t\t\t\t\t\tonChange={(event) => setUserDetails(event)}\n\t\t\t\t\t\t\t\thasError={textFields.confirmPasswordError}\n\t\t\t\t\t\t\t\tvalue={textFields.confirmPassword}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t{/*//! Commented for future \n\t\t\t\t{isLogin && (\n\t\t\t\t\t<div className='remember-me-block'>\n\t\t\t\t\t\t<input type='checkbox' className='checkbox' name='remember me' />\n\t\t\t\t\t\t<label className='margin-right remember-me-text' htmlFor='remember-me'>\n\t\t\t\t\t\t\tRemember me\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t)} */}\n\n\t\t\t\t<button\n\t\t\t\t\tonClick={\n\t\t\t\t\t\tisLogin\n\t\t\t\t\t\t\t? async () => {\n\t\t\t\t\t\t\t\t\tconst success = await loginChecker();\n\t\t\t\t\t\t\t\t\tsuccess ? (toggleModal(), setTextFields(defaultText)) : null;\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: () => {\n\t\t\t\t\t\t\t\t\tsignupChecker();\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t\tclassName={`btn btn-products ${isLoading ? 'btn-products-disabled' : 'btn-primary'}`}\n\t\t\t\t>\n\t\t\t\t\t{isLoading ? 'Loading...' : isLogin ? 'Login' : 'SignUp'}\n\t\t\t\t</button>\n\t\t\t\t{error.hasError && <p className='modal-error'> *{error.errorMessage} </p>}\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\ttoggleIsLogin();\n\t\t\t\t\t\terrorHandler(false, '');\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=' btn-link btn'\n\t\t\t\t>\n\t\t\t\t\t{isLogin ? \"Don't have account?Sign up!\" : 'Already have account?Log In!'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport { LoginCardModal };\n\nconst InputField = ({ labelText, type, name, onChange, value, hasError }) => {\n\treturn (\n\t\t<>\n\t\t\t<label htmlFor='email'>{labelText}</label>\n\t\t\t<input\n\t\t\t\tclassName={`text-field ${hasError && 'text-field-error'} `}\n\t\t\t\tautoComplete='off'\n\t\t\t\ttype={type}\n\t\t\t\tname={name}\n\t\t\t\tplaceholder={labelText}\n\t\t\t\tonChange={onChange}\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t</>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}