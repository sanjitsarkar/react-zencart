{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nimport bcrypt from \"bcryptjs\";\n\nconst jwt = require(\"jsonwebtoken\");\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, email, password}\n * */\n\n\nexport const signupHandler = function (schema, request) {\n  const {\n    email,\n    password,\n    ...rest\n  } = JSON.parse(request.requestBody);\n\n  try {\n    // check if email already exists\n    const foundUser = schema.users.findBy({\n      email\n    });\n\n    if (foundUser) {\n      return new Response(422, {}, {\n        errors: [\"Unprocessable Entity. Email Already Exists.\"]\n      });\n    }\n\n    const _id = uuid();\n\n    const encryptedPassword = bcrypt.hashSync(password, 5);\n    const newUser = {\n      _id,\n      email,\n      password: encryptedPassword,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      ...rest,\n      cart: [],\n      wishlist: []\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = jwt.sign({\n      _id,\n      email\n    }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, {\n      createdUser,\n      encodedToken\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {email, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const {\n    email,\n    password\n  } = JSON.parse(request.requestBody);\n\n  try {\n    const foundUser = schema.users.findBy({\n      email\n    });\n\n    if (!foundUser) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    if (bcrypt.compareSync(password, foundUser.password)) {\n      const encodedToken = jwt.sign({\n        _id: foundUser._id,\n        email\n      }, process.env.REACT_APP_JWT_SECRET);\n      foundUser.password = undefined;\n      return new Response(200, {}, {\n        foundUser,\n        encodedToken\n      });\n    }\n\n    return new Response(401, {}, {\n      errors: [\"The credentials you entered are invalid. Unauthorized access error.\"]\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["/home/xanjit/Desktop/neog/react/react-zencart/src/backend/controllers/AuthController.js"],"names":["v4","uuid","Response","formatDate","bcrypt","jwt","require","signupHandler","schema","request","email","password","rest","JSON","parse","requestBody","foundUser","users","findBy","errors","_id","encryptedPassword","hashSync","newUser","createdAt","updatedAt","cart","wishlist","createdUser","create","encodedToken","sign","process","env","REACT_APP_JWT_SECRET","error","loginHandler","compareSync","undefined"],"mappings":"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","sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nimport bcrypt from \"bcryptjs\";\nconst jwt = require(\"jsonwebtoken\");\n\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, email, password}\n * */\n\nexport const signupHandler = function (schema, request) {\n  const { email, password, ...rest } = JSON.parse(request.requestBody);\n  try {\n    // check if email already exists\n    const foundUser = schema.users.findBy({ email });\n    if (foundUser) {\n      return new Response(\n        422,\n        {},\n        {\n          errors: [\"Unprocessable Entity. Email Already Exists.\"],\n        }\n      );\n    }\n    const _id = uuid();\n    const encryptedPassword = bcrypt.hashSync(password, 5);\n    const newUser = {\n      _id,\n      email,\n      password: encryptedPassword,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      ...rest,\n      cart: [],\n      wishlist: [],\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = jwt.sign(\n      { _id, email },\n      process.env.REACT_APP_JWT_SECRET\n    );\n    return new Response(201, {}, { createdUser, encodedToken });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {email, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const { email, password } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({ email });\n    if (!foundUser) {\n      return new Response(\n        404,\n        {},\n        { errors: [\"The email you entered is not Registered. Not Found error\"] }\n      );\n    }\n    if (bcrypt.compareSync(password, foundUser.password)) {\n      const encodedToken = jwt.sign(\n        { _id: foundUser._id, email },\n        process.env.REACT_APP_JWT_SECRET\n      );\n      foundUser.password = undefined;\n      return new Response(200, {}, { foundUser, encodedToken });\n    }\n    return new Response(\n      401,\n      {},\n      {\n        errors: [\n          \"The credentials you entered are invalid. Unauthorized access error.\",\n        ],\n      }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}